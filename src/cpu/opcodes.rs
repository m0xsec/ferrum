use std::collections::HashMap;

pub struct OpCode {
    /// CPU Instruction, represented as a hexadecimal u8.
    /// For example, 0x00.
    pub op: u8,

    /// Instruction mnemonic. For example "NOP".
    pub mnemonic: &'static str,

    /// The length in bytes. For example, 4.
    pub length: u8,

    /// Duration in cycles.
    /// Our definition of "cycle" is based on system clock ticks, or T-states.
    pub cycles: u32,
}

impl OpCode {
    fn new(op: u8, mnemonic: &'static str, length: u8, cycles: u32) -> Self {
        OpCode {
            op,
            mnemonic,
            length,
            cycles,
        }
    }
}

lazy_static! {
    pub static ref CPU_OP_CODES: Vec<OpCode> = vec![
        OpCode::new(0x00, "NOP", 1, 4),
        OpCode::new(0x01, "LD", 3, 12),
        OpCode::new(0x02, "LD", 1, 8),
        OpCode::new(0x03, "INC", 1, 8),
        OpCode::new(0x04, "INC", 1, 4),
        OpCode::new(0x05, "DEC", 1, 4),
        OpCode::new(0x06, "LD", 2, 8),
        OpCode::new(0x07, "RLCA", 1, 4),
        OpCode::new(0x08, "LD", 3, 20),
        OpCode::new(0x09, "ADD", 1, 8),
        OpCode::new(0x0A, "LD", 1, 8),
        OpCode::new(0x0B, "DEC", 1, 8),
        OpCode::new(0x0C, "INC", 1, 4),
        OpCode::new(0x0D, "DEC", 1, 4),
        OpCode::new(0x0E, "LD", 2, 8),
        OpCode::new(0x0F, "RRCA", 1, 4),
        OpCode::new(0x10, "STOP", 2, 4),
        OpCode::new(0x11, "LD", 3, 12),
        OpCode::new(0x12, "LD", 1, 8),
        OpCode::new(0x13, "INC", 1, 8),
        OpCode::new(0x14, "INC", 1, 4),
        OpCode::new(0x15, "DEC", 1, 4),
        OpCode::new(0x16, "LD", 2, 8),
        OpCode::new(0x17, "RLA", 1, 4),
        OpCode::new(0x18, "JR", 2, 12),
        OpCode::new(0x19, "ADD", 1, 8),
        OpCode::new(0x1A, "LD", 1, 8),
        OpCode::new(0x1B, "DEC", 1, 8),
        OpCode::new(0x1C, "INC", 1, 4),
        OpCode::new(0x1D, "DEC", 1, 4),
        OpCode::new(0x1E, "LD", 2, 8),
        OpCode::new(0x1F, "RRA", 1, 4),
        OpCode::new(0x20, "JR", 2, 128),
        OpCode::new(0x21, "LD", 3, 12),
        OpCode::new(0x22, "LD", 1, 8),
        OpCode::new(0x23, "INC", 1, 8),
        OpCode::new(0x24, "INC", 1, 4),
        OpCode::new(0x25, "DEC", 1, 4),
        OpCode::new(0x26, "LD", 2, 8),
        OpCode::new(0x27, "DAA", 1, 4),
        OpCode::new(0x28, "JR", 2, 128),
        OpCode::new(0x29, "ADD", 1, 8),
        OpCode::new(0x2A, "LD", 1, 8),
        OpCode::new(0x2B, "DEC", 1, 8),
        OpCode::new(0x2C, "INC", 1, 4),
        OpCode::new(0x2D, "DEC", 1, 4),
        OpCode::new(0x2E, "LD", 2, 8),
        OpCode::new(0x2F, "CPL", 1, 4),
        OpCode::new(0x30, "JR", 2, 128),
        OpCode::new(0x31, "LD", 3, 12),
        OpCode::new(0x32, "LD", 1, 8),
        OpCode::new(0x33, "INC", 1, 8),
        OpCode::new(0x34, "INC", 1, 12),
        OpCode::new(0x35, "DEC", 1, 12),
        OpCode::new(0x36, "LD", 2, 12),
        OpCode::new(0x37, "SCF", 1, 4),
        OpCode::new(0x38, "JR", 2, 128),
        OpCode::new(0x39, "ADD", 1, 8),
        OpCode::new(0x3A, "LD", 1, 8),
        OpCode::new(0x3B, "DEC", 1, 8),
        OpCode::new(0x3C, "INC", 1, 4),
        OpCode::new(0x3D, "DEC", 1, 4),
        OpCode::new(0x3E, "LD", 2, 8),
        OpCode::new(0x3F, "CCF", 1, 4),
        OpCode::new(0x40, "LD", 1, 4),
        OpCode::new(0x41, "LD", 1, 4),
        OpCode::new(0x42, "LD", 1, 4),
        OpCode::new(0x43, "LD", 1, 4),
        OpCode::new(0x44, "LD", 1, 4),
        OpCode::new(0x45, "LD", 1, 4),
        OpCode::new(0x46, "LD", 1, 8),
        OpCode::new(0x47, "LD", 1, 4),
        OpCode::new(0x48, "LD", 1, 4),
        OpCode::new(0x49, "LD", 1, 4),
        OpCode::new(0x4A, "LD", 1, 4),
        OpCode::new(0x4B, "LD", 1, 4),
        OpCode::new(0x4C, "LD", 1, 4),
        OpCode::new(0x4D, "LD", 1, 4),
        OpCode::new(0x4E, "LD", 1, 8),
        OpCode::new(0x4F, "LD", 1, 4),
        OpCode::new(0x50, "LD", 1, 4),
        OpCode::new(0x51, "LD", 1, 4),
        OpCode::new(0x52, "LD", 1, 4),
        OpCode::new(0x53, "LD", 1, 4),
        OpCode::new(0x54, "LD", 1, 4),
        OpCode::new(0x55, "LD", 1, 4),
        OpCode::new(0x56, "LD", 1, 8),
        OpCode::new(0x57, "LD", 1, 4),
        OpCode::new(0x58, "LD", 1, 4),
        OpCode::new(0x59, "LD", 1, 4),
        OpCode::new(0x5A, "LD", 1, 4),
        OpCode::new(0x5B, "LD", 1, 4),
        OpCode::new(0x5C, "LD", 1, 4),
        OpCode::new(0x5D, "LD", 1, 4),
        OpCode::new(0x5E, "LD", 1, 8),
        OpCode::new(0x5F, "LD", 1, 4),
        OpCode::new(0x60, "LD", 1, 4),
        OpCode::new(0x61, "LD", 1, 4),
        OpCode::new(0x62, "LD", 1, 4),
        OpCode::new(0x63, "LD", 1, 4),
        OpCode::new(0x64, "LD", 1, 4),
        OpCode::new(0x65, "LD", 1, 4),
        OpCode::new(0x66, "LD", 1, 8),
        OpCode::new(0x67, "LD", 1, 4),
        OpCode::new(0x68, "LD", 1, 4),
        OpCode::new(0x69, "LD", 1, 4),
        OpCode::new(0x6A, "LD", 1, 4),
        OpCode::new(0x6B, "LD", 1, 4),
        OpCode::new(0x6C, "LD", 1, 4),
        OpCode::new(0x6D, "LD", 1, 4),
        OpCode::new(0x6E, "LD", 1, 8),
        OpCode::new(0x6F, "LD", 1, 4),
        OpCode::new(0x70, "LD", 1, 8),
        OpCode::new(0x71, "LD", 1, 8),
        OpCode::new(0x72, "LD", 1, 8),
        OpCode::new(0x73, "LD", 1, 8),
        OpCode::new(0x74, "LD", 1, 8),
        OpCode::new(0x75, "LD", 1, 8),
        OpCode::new(0x76, "HALT", 1, 4),
        OpCode::new(0x77, "LD", 1, 8),
        OpCode::new(0x78, "LD", 1, 4),
        OpCode::new(0x79, "LD", 1, 4),
        OpCode::new(0x7A, "LD", 1, 4),
        OpCode::new(0x7B, "LD", 1, 4),
        OpCode::new(0x7C, "LD", 1, 4),
        OpCode::new(0x7D, "LD", 1, 4),
        OpCode::new(0x7E, "LD", 1, 8),
        OpCode::new(0x7F, "LD", 1, 4),
        OpCode::new(0x80, "ADD", 1, 4),
        OpCode::new(0x81, "ADD", 1, 4),
        OpCode::new(0x82, "ADD", 1, 4),
        OpCode::new(0x83, "ADD", 1, 4),
        OpCode::new(0x84, "ADD", 1, 4),
        OpCode::new(0x85, "ADD", 1, 4),
        OpCode::new(0x86, "ADD", 1, 8),
        OpCode::new(0x87, "ADD", 1, 4),
        OpCode::new(0x88, "ADC", 1, 4),
        OpCode::new(0x89, "ADC", 1, 4),
        OpCode::new(0x8A, "ADC", 1, 4),
        OpCode::new(0x8B, "ADC", 1, 4),
        OpCode::new(0x8C, "ADC", 1, 4),
        OpCode::new(0x8D, "ADC", 1, 4),
        OpCode::new(0x8E, "ADC", 1, 8),
        OpCode::new(0x8F, "ADC", 1, 4),
        OpCode::new(0x90, "SUB", 1, 4),
        OpCode::new(0x91, "SUB", 1, 4),
        OpCode::new(0x92, "SUB", 1, 4),
        OpCode::new(0x93, "SUB", 1, 4),
        OpCode::new(0x94, "SUB", 1, 4),
        OpCode::new(0x95, "SUB", 1, 4),
        OpCode::new(0x96, "SUB", 1, 8),
        OpCode::new(0x97, "SUB", 1, 4),
        OpCode::new(0x98, "SBC", 1, 4),
        OpCode::new(0x99, "SBC", 1, 4),
        OpCode::new(0x9A, "SBC", 1, 4),
        OpCode::new(0x9B, "SBC", 1, 4),
        OpCode::new(0x9C, "SBC", 1, 4),
        OpCode::new(0x9D, "SBC", 1, 4),
        OpCode::new(0x9E, "SBC", 1, 8),
        OpCode::new(0x9F, "SBC", 1, 4),
        OpCode::new(0xA0, "AND", 1, 4),
        OpCode::new(0xA1, "AND", 1, 4),
        OpCode::new(0xA2, "AND", 1, 4),
        OpCode::new(0xA3, "AND", 1, 4),
        OpCode::new(0xA4, "AND", 1, 4),
        OpCode::new(0xA5, "AND", 1, 4),
        OpCode::new(0xA6, "AND", 1, 8),
        OpCode::new(0xA7, "AND", 1, 4),
        OpCode::new(0xA8, "XOR", 1, 4),
        OpCode::new(0xA9, "XOR", 1, 4),
        OpCode::new(0xAA, "XOR", 1, 4),
        OpCode::new(0xAB, "XOR", 1, 4),
        OpCode::new(0xAC, "XOR", 1, 4),
        OpCode::new(0xAD, "XOR", 1, 4),
        OpCode::new(0xAE, "XOR", 1, 8),
        OpCode::new(0xAF, "XOR", 1, 4),
        OpCode::new(0xB0, "OR", 1, 4),
        OpCode::new(0xB1, "OR", 1, 4),
        OpCode::new(0xB2, "OR", 1, 4),
        OpCode::new(0xB3, "OR", 1, 4),
        OpCode::new(0xB4, "OR", 1, 4),
        OpCode::new(0xB5, "OR", 1, 4),
        OpCode::new(0xB6, "OR", 1, 8),
        OpCode::new(0xB7, "OR", 1, 4),
        OpCode::new(0xB8, "CP", 1, 4),
        OpCode::new(0xB9, "CP", 1, 4),
        OpCode::new(0xBA, "CP", 1, 4),
        OpCode::new(0xBB, "CP", 1, 4),
        OpCode::new(0xBC, "CP", 1, 4),
        OpCode::new(0xBD, "CP", 1, 4),
        OpCode::new(0xBE, "CP", 1, 8),
        OpCode::new(0xBF, "CP", 1, 4),
        OpCode::new(0xC0, "RET", 1, 208),
        OpCode::new(0xC1, "POP", 1, 12),
        OpCode::new(0xC2, "JP", 3, 1612),
        OpCode::new(0xC3, "JP", 3, 16),
        OpCode::new(0xC4, "CALL", 3, 2412),
        OpCode::new(0xC5, "PUSH", 1, 16),
        OpCode::new(0xC6, "ADD", 2, 8),
        OpCode::new(0xC7, "RST", 1, 16),
        OpCode::new(0xC8, "RET", 1, 208),
        OpCode::new(0xC9, "RET", 1, 16),
        OpCode::new(0xCA, "JP", 3, 1612),
        OpCode::new(0xCB, "PREFIX", 1, 4),
        OpCode::new(0xCC, "CALL", 3, 2412),
        OpCode::new(0xCD, "CALL", 3, 24),
        OpCode::new(0xCE, "ADC", 2, 8),
        OpCode::new(0xCF, "RST", 1, 16),
        OpCode::new(0xD0, "RET", 1, 208),
        OpCode::new(0xD1, "POP", 1, 12),
        OpCode::new(0xD2, "JP", 3, 1612),
        OpCode::new(0xD3, "ILLEGAL_D3", 1, 4),
        OpCode::new(0xD4, "CALL", 3, 2412),
        OpCode::new(0xD5, "PUSH", 1, 16),
        OpCode::new(0xD6, "SUB", 2, 8),
        OpCode::new(0xD7, "RST", 1, 16),
        OpCode::new(0xD8, "RET", 1, 208),
        OpCode::new(0xD9, "RETI", 1, 16),
        OpCode::new(0xDA, "JP", 3, 1612),
        OpCode::new(0xDB, "ILLEGAL_DB", 1, 4),
        OpCode::new(0xDC, "CALL", 3, 2412),
        OpCode::new(0xDD, "ILLEGAL_DD", 1, 4),
        OpCode::new(0xDE, "SBC", 2, 8),
        OpCode::new(0xDF, "RST", 1, 16),
        OpCode::new(0xE0, "LDH", 2, 12),
        OpCode::new(0xE1, "POP", 1, 12),
        OpCode::new(0xE2, "LD", 1, 8),
        OpCode::new(0xE3, "ILLEGAL_E3", 1, 4),
        OpCode::new(0xE4, "ILLEGAL_E4", 1, 4),
        OpCode::new(0xE5, "PUSH", 1, 16),
        OpCode::new(0xE6, "AND", 2, 8),
        OpCode::new(0xE7, "RST", 1, 16),
        OpCode::new(0xE8, "ADD", 2, 16),
        OpCode::new(0xE9, "JP", 1, 4),
        OpCode::new(0xEA, "LD", 3, 16),
        OpCode::new(0xEB, "ILLEGAL_EB", 1, 4),
        OpCode::new(0xEC, "ILLEGAL_EC", 1, 4),
        OpCode::new(0xED, "ILLEGAL_ED", 1, 4),
        OpCode::new(0xEE, "XOR", 2, 8),
        OpCode::new(0xEF, "RST", 1, 16),
        OpCode::new(0xF0, "LDH", 2, 12),
        OpCode::new(0xF1, "POP", 1, 12),
        OpCode::new(0xF2, "LD", 1, 8),
        OpCode::new(0xF3, "DI", 1, 4),
        OpCode::new(0xF4, "ILLEGAL_F4", 1, 4),
        OpCode::new(0xF5, "PUSH", 1, 16),
        OpCode::new(0xF6, "OR", 2, 8),
        OpCode::new(0xF7, "RST", 1, 16),
        OpCode::new(0xF8, "LD", 2, 12),
        OpCode::new(0xF9, "LD", 1, 8),
        OpCode::new(0xFA, "LD", 3, 16),
        OpCode::new(0xFB, "EI", 1, 4),
        OpCode::new(0xFC, "ILLEGAL_FC", 1, 4),
        OpCode::new(0xFD, "ILLEGAL_FD", 1, 4),
        OpCode::new(0xFE, "CP", 2, 8),
        OpCode::new(0xFF, "RST", 1, 16),
    ];
    // TODO: Add CB opcodes
    pub static ref CB_OP_CODES: Vec<OpCode> = vec![];
    pub static ref OPCODES_MAP: HashMap<u8, &'static OpCode> = {
        let mut map = HashMap::new();
        for cpu_op in &*CPU_OP_CODES {
            map.insert(cpu_op.op, cpu_op);
        }
        map
    };
    pub static ref CB_OPCODES_MAP: HashMap<u8, &'static OpCode> = {
        let mut map = HashMap::new();
        for cb_op in &*CB_OP_CODES {
            map.insert(cb_op.op, cb_op);
        }
        map
    };
}
